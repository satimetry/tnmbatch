
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin10.8.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> # Pull down observations and apply all rules
> Sys.setenv(NOAWT = "true")
> 
> rootdir <- "/Users/stefanopicozzi/websites/nudge"
> user <- "stefano"
> ppi <- 300
> 
> library(httr)
> library(rjson)
> library(RColorBrewer)
> library("Rdrools6")
Loading required package: rJava
Loading required package: Rdrools6jars

Attaching package: ‘Rdrools6’

The following object is masked _by_ ‘.GlobalEnv’:

    rules

> ls("package:Rdrools6", all = TRUE)
[1] ".Depends"     "class"        "rules"        "rulesSession" "runRules"    
> lsf.str("package:Rdrools6", all = TRUE)
rulesSession : function (mode, rules, input.columns, output.columns)  
runRules : function (rules.session, input.df)  
> 
> wd <- paste(rootdir, "/R/fitbit/user/", user, sep="")
> setwd(wd)
> 
> # Sourced from fitbit app detail
> token_url = "http://api.fitbit.com/oauth/request_token"
> access_url = "http://api.fitbit.com/oauth/access_token"
> auth_url = "http://www.fitbit.com/oauth/authorize"
> key = "9b8a4dfbb4684ba5b5fb3b07122e99a7"
> secret = "27ad03d202d8439eb693d1b8430ceca8"
> 
> # Sourced from fitbit app detail
> fbr = oauth_app('stefano-fitbit',key,secret)
> fitbit = oauth_endpoint(token_url,auth_url,access_url)
> #token = oauth1.0_token(fitbit,fbr)
> #sig = sign_oauth1.0(fbr, token=token$oauth_token, token_secret=token$oauth_token_secret)
> 
> #save(token, file="fitbit-token.RData")
> #save(sig, file="fitbit-sig.RData")
> 
> load(file = "fitbit-token.RData", .GlobalEnv)
> load(file = "fitbit-sig.RData", .GlobalEnv)
> 
> getURL <- "http://api.fitbit.com/1/user/-/activities/steps/date/"
> startdate <- Sys.Date() - 7
> startdatestr <- as.POSIXct(startdate, format = "%a %b %d")
> getURL <- paste(getURL, startdate, "/today.json", sep = "")
> 
> # get all step data from my first day of use to the current date:
> stepsJSON <- tryCatch({
+    GET(getURL, sig)
+ }, warning = function(w) {
+    print("Warning")
+    stop()
+ }, error = function(e) {
+    print("Error")
+    stop()
+ }, finally = {
+ })
> 
> stepsDF <- NULL
> for (i in 1:length(content(stepsJSON)$`activities-steps`)) {
+    x = c( content(stepsJSON)$`activities-steps`[i][[1]][['dateTime']], content(stepsJSON)$`activities-steps`[i][[1]][['value']] ) 
+    stepsDF <- cbind(stepsDF, x)
+ }
> stepsDF <- t(stepsDF)
> colnames(stepsDF) = c("stepDate", "stepCount")
> stepsDF = as.data.frame(stepsDF, row.names = 1)
> 
> # extract step counts and convert to numeric:
> steps = as.numeric(as.character(stepsDF$stepCount))
> 
> fileName = paste(rootdir, "/php/images/fitbit/user/", user, "/activity.png", sep = "")
> png(paste(fileName, sep=""),
+     res = ppi,
+     width = 5*ppi,
+     height = 4*ppi,
+     pointsize = 10,
+     units = "px")
> 
> # set up and plot the graph:
> brew = brewer.pal(3,"Set1") # red, blue, green
> cols = rep(brew[1],length(steps))
> cols[steps > 10000] = brew[3]
> barplot(steps, ylim = c(0, max(steps)*1.2), col = cols, ylab = "Steps", names = gsub("2013-","", stepsDF[['stepDate']]), las=2, border = 0, cex.axis = 0.8)
> abline(h = 10000, lty = 2)
> 
> dev.off()
null device 
          1 
> 
> Sys.setenv(NOAWT = "true")
> inputDF <- cbind( id = c(user), stepsDF)
> input.columns <- colnames(inputDF)
> output.columns <-c ("id", "rulename", "ruledate", "rulemsg", "ruledata")
> 
> # Consider multiple rules files, so can separate user rule profiles from rules to be executed
> # That is what rules does User want to fire and then apply rules
> # User profile captured as rules
> rules <- readLines("fitbit1.drl")
> mode <- "STREAM"
> rules.session <- rulesSession(mode, rules, input.columns, output.columns)
SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
> outputDF <- runRules(rules.session, inputDF)
ruleInsertActivity->stefano-Wed Jan 01 00:00:00 EST 2014-0
ruleInsertActivity->stefano-Thu Jan 02 00:00:00 EST 2014-239
ruleInsertActivity->stefano-Fri Jan 03 00:00:00 EST 2014-12160
ruleInsertActivity->stefano-Sat Jan 04 00:00:00 EST 2014-1127
ruleInsertActivity->stefano-Sun Jan 05 00:00:00 EST 2014-260
ruleInsertActivity->stefano-Mon Jan 06 00:00:00 EST 2014-9497
ruleInsertActivity->stefano-Tue Jan 07 00:00:00 EST 2014-6039
ruleInsertActivity->stefano-Wed Jan 08 00:00:00 EST 2014-4
ruleInsertParticipant->stefano
ruleInsertUserRule->stefano-ruleOutputZeroSteps
ruleInsertUserRule->stefano-ruleOutputHighSteps
ruleInsertUserRule->stefano-ruleOutputLowSteps
ruleGetUserRules->stefano-ruleOutputLowSteps
ruleGetUserRules->stefano-ruleOutputHighSteps
ruleGetUserRules->stefano-ruleOutputZeroSteps
ruleOutputHighSteps->stefano
ruleOutputLowSteps->stefano
ruleOutputLowSteps->stefano
ruleOutputLowSteps->stefano
ruleOutputLowSteps->stefano
ruleOutputZeroSteps->stefano
ruleAverageSteps->3665.75
ruleHighStepCount->1
ruleAverageStepCount->4189.428571428572
ruleZeroStepCount->1
> 
> save(outputDF, file = paste(wd, "/outputDF.dat", sep = ""))
> 
> 
> 
> 
> proc.time()
   user  system elapsed 
  4.940   0.206   4.293 
